
tyni.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000716  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000006f  00800060  00800060  0000078a  2**0
                  ALLOC
  2 .stab         00000828  00000000  00000000  0000078c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000014b  00000000  00000000  00000fb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000020  00000000  00000000  000010ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001b0  00000000  00000000  0000111f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000619  00000000  00000000  000012cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000022f  00000000  00000000  000018e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000085f  00000000  00000000  00001b17  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000120  00000000  00000000  00002378  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000024b  00000000  00000000  00002498  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000047e  00000000  00000000  000026e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 00000038  00000000  00000000  00002b61  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	1f c0       	rjmp	.+62     	; 0x42 <__bad_interrupt>
   4:	1e c0       	rjmp	.+60     	; 0x42 <__bad_interrupt>
   6:	1d c0       	rjmp	.+58     	; 0x42 <__bad_interrupt>
   8:	b3 c0       	rjmp	.+358    	; 0x170 <__vector_4>
   a:	1b c0       	rjmp	.+54     	; 0x42 <__bad_interrupt>
   c:	1a c0       	rjmp	.+52     	; 0x42 <__bad_interrupt>
   e:	bc c0       	rjmp	.+376    	; 0x188 <__vector_7>
  10:	18 c0       	rjmp	.+48     	; 0x42 <__bad_interrupt>
  12:	17 c0       	rjmp	.+46     	; 0x42 <__bad_interrupt>
  14:	16 c0       	rjmp	.+44     	; 0x42 <__bad_interrupt>
  16:	15 c0       	rjmp	.+42     	; 0x42 <__bad_interrupt>
  18:	14 c0       	rjmp	.+40     	; 0x42 <__bad_interrupt>
  1a:	fc c0       	rjmp	.+504    	; 0x214 <__vector_13>
  1c:	12 c1       	rjmp	.+548    	; 0x242 <__vector_14>
  1e:	11 c0       	rjmp	.+34     	; 0x42 <__bad_interrupt>
  20:	10 c0       	rjmp	.+32     	; 0x42 <__bad_interrupt>
  22:	0f c0       	rjmp	.+30     	; 0x42 <__bad_interrupt>
  24:	0e c0       	rjmp	.+28     	; 0x42 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf ed       	ldi	r28, 0xDF	; 223
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_clear_bss>:
  2e:	10 e0       	ldi	r17, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	01 c0       	rjmp	.+2      	; 0x38 <.do_clear_bss_start>

00000036 <.do_clear_bss_loop>:
  36:	1d 92       	st	X+, r1

00000038 <.do_clear_bss_start>:
  38:	af 3c       	cpi	r26, 0xCF	; 207
  3a:	b1 07       	cpc	r27, r17
  3c:	e1 f7       	brne	.-8      	; 0x36 <.do_clear_bss_loop>
  3e:	a4 d2       	rcall	.+1352   	; 0x588 <main>
  40:	68 c3       	rjmp	.+1744   	; 0x712 <_exit>

00000042 <__bad_interrupt>:
  42:	de cf       	rjmp	.-68     	; 0x0 <__vectors>

00000044 <read_registr_param>:
	COUNT=j+2;
	send_message();
}
unsigned short read_registr_param(unsigned char address)
{
	if(address<16)
  44:	80 31       	cpi	r24, 0x10	; 16
  46:	28 f4       	brcc	.+10     	; 0x52 <read_registr_param+0xe>
		return FACT[address];
  48:	e8 2f       	mov	r30, r24
  4a:	f0 e0       	ldi	r31, 0x00	; 0
  4c:	e4 58       	subi	r30, 0x84	; 132
  4e:	ff 4f       	sbci	r31, 0xFF	; 255
  50:	08 c0       	rjmp	.+16     	; 0x62 <read_registr_param+0x1e>
	if((address>=16)&&(address<32))
  52:	98 2f       	mov	r25, r24
  54:	90 51       	subi	r25, 0x10	; 16
  56:	90 31       	cpi	r25, 0x10	; 16
  58:	30 f4       	brcc	.+12     	; 0x66 <read_registr_param+0x22>
		return PLAN[address-16];
  5a:	e8 2f       	mov	r30, r24
  5c:	f0 e0       	ldi	r31, 0x00	; 0
  5e:	ef 5a       	subi	r30, 0xAF	; 175
  60:	ff 4f       	sbci	r31, 0xFF	; 255
  62:	20 81       	ld	r18, Z
  64:	11 c0       	rjmp	.+34     	; 0x88 <read_registr_param+0x44>
	if((address>=32)&&(address<48))
  66:	98 2f       	mov	r25, r24
  68:	90 52       	subi	r25, 0x20	; 32
  6a:	90 31       	cpi	r25, 0x10	; 16
  6c:	28 f4       	brcc	.+10     	; 0x78 <read_registr_param+0x34>
		return BLOCK[address-32];
  6e:	e8 2f       	mov	r30, r24
  70:	f0 e0       	ldi	r31, 0x00	; 0
  72:	ec 58       	subi	r30, 0x8C	; 140
  74:	ff 4f       	sbci	r31, 0xFF	; 255
  76:	f5 cf       	rjmp	.-22     	; 0x62 <read_registr_param+0x1e>
	if((address>=48)&&(address<176))
  78:	98 2f       	mov	r25, r24
  7a:	90 53       	subi	r25, 0x30	; 48
  7c:	97 fd       	sbrc	r25, 7
  7e:	06 c0       	rjmp	.+12     	; 0x8c <read_registr_param+0x48>
		return eeprom_read_byte(address-48);
  80:	90 e0       	ldi	r25, 0x00	; 0
  82:	c0 97       	sbiw	r24, 0x30	; 48
  84:	30 d3       	rcall	.+1632   	; 0x6e6 <__eerd_byte_tn2313>
  86:	28 2f       	mov	r18, r24
  88:	30 e0       	ldi	r19, 0x00	; 0
  8a:	15 c0       	rjmp	.+42     	; 0xb6 <read_registr_param+0x72>
	if(address==176)
  8c:	80 3b       	cpi	r24, 0xB0	; 176
  8e:	91 f4       	brne	.+36     	; 0xb4 <read_registr_param+0x70>
		return ((PORTD&0x20)>>1)|((PORTD&0x10)>>4);
  90:	82 b3       	in	r24, 0x12	; 18
  92:	22 b3       	in	r18, 0x12	; 18
  94:	30 e0       	ldi	r19, 0x00	; 0
  96:	20 71       	andi	r18, 0x10	; 16
  98:	30 70       	andi	r19, 0x00	; 0
  9a:	54 e0       	ldi	r21, 0x04	; 4
  9c:	35 95       	asr	r19
  9e:	27 95       	ror	r18
  a0:	5a 95       	dec	r21
  a2:	e1 f7       	brne	.-8      	; 0x9c <read_registr_param+0x58>
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	80 72       	andi	r24, 0x20	; 32
  a8:	90 70       	andi	r25, 0x00	; 0
  aa:	95 95       	asr	r25
  ac:	87 95       	ror	r24
  ae:	28 2b       	or	r18, r24
  b0:	39 2b       	or	r19, r25
  b2:	01 c0       	rjmp	.+2      	; 0xb6 <read_registr_param+0x72>
  b4:	08 95       	ret
}
  b6:	c9 01       	movw	r24, r18
  b8:	08 95       	ret

000000ba <USART_Init>:
}
void USART_Init( unsigned char i ) //Функция инициализации USART
{
	unsigned int baudrate;
	switch (i){
		default: baudrate=103;	OCR0A=0x1C;	OCR0B=0x0C;
  ba:	8c e1       	ldi	r24, 0x1C	; 28
  bc:	86 bf       	out	0x36, r24	; 54
  be:	8c e0       	ldi	r24, 0x0C	; 12
  c0:	8c bf       	out	0x3c, r24	; 60
	}
	UBRRH = (unsigned char) (baudrate>>8);
  c2:	12 b8       	out	0x02, r1	; 2
	UBRRL = (unsigned char) baudrate;
  c4:	87 e6       	ldi	r24, 0x67	; 103
  c6:	89 b9       	out	0x09, r24	; 9
	UCSRA = (1<<U2X); //Удвоение скорости
  c8:	82 e0       	ldi	r24, 0x02	; 2
  ca:	8b b9       	out	0x0b, r24	; 11
	UCSRB = (1<<RXEN)|(1<<TXEN)|(1<<RXCIE); //Разрешение на прием и н апередачу через USART
  cc:	88 e9       	ldi	r24, 0x98	; 152
  ce:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (0<<USBS)|(1<<UCSZ0)|(1<<UCSZ1);
  d0:	86 e0       	ldi	r24, 0x06	; 6
  d2:	83 b9       	out	0x03, r24	; 3
} 
  d4:	08 95       	ret

000000d6 <write_registr_param>:
		return eeprom_read_byte(address-48);
	if(address==176)
		return ((PORTD&0x20)>>1)|((PORTD&0x10)>>4);
}
unsigned char write_registr_param(unsigned char adress, unsigned char data)
{
  d6:	0f 93       	push	r16
  d8:	1f 93       	push	r17
  da:	18 2f       	mov	r17, r24
  dc:	06 2f       	mov	r16, r22
	if(adress<16)
  de:	80 31       	cpi	r24, 0x10	; 16
  e0:	28 f4       	brcc	.+10     	; 0xec <__stack+0xd>
		FACT[adress]=data;
  e2:	e8 2f       	mov	r30, r24
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	e4 58       	subi	r30, 0x84	; 132
  e8:	ff 4f       	sbci	r31, 0xFF	; 255
  ea:	60 83       	st	Z, r22
	if((adress>=16)&&(adress<32))
  ec:	81 2f       	mov	r24, r17
  ee:	80 51       	subi	r24, 0x10	; 16
  f0:	80 31       	cpi	r24, 0x10	; 16
  f2:	28 f4       	brcc	.+10     	; 0xfe <__stack+0x1f>
		PLAN[adress-16]=data;
  f4:	e1 2f       	mov	r30, r17
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	ef 5a       	subi	r30, 0xAF	; 175
  fa:	ff 4f       	sbci	r31, 0xFF	; 255
  fc:	00 83       	st	Z, r16
	if((adress>=32)&&(adress<48))
  fe:	81 2f       	mov	r24, r17
 100:	80 52       	subi	r24, 0x20	; 32
 102:	80 31       	cpi	r24, 0x10	; 16
 104:	28 f4       	brcc	.+10     	; 0x110 <__stack+0x31>
		BLOCK[adress-32]=data;
 106:	e1 2f       	mov	r30, r17
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	ec 58       	subi	r30, 0x8C	; 140
 10c:	ff 4f       	sbci	r31, 0xFF	; 255
 10e:	00 83       	st	Z, r16
	if((adress>=48)&&(adress<176))
 110:	81 2f       	mov	r24, r17
 112:	80 53       	subi	r24, 0x30	; 48
 114:	87 fd       	sbrc	r24, 7
 116:	06 c0       	rjmp	.+12     	; 0x124 <__stack+0x45>
		eeprom_write_byte(adress-48,data);
 118:	21 2f       	mov	r18, r17
 11a:	30 e0       	ldi	r19, 0x00	; 0
 11c:	c9 01       	movw	r24, r18
 11e:	c0 97       	sbiw	r24, 0x30	; 48
 120:	60 2f       	mov	r22, r16
 122:	e9 d2       	rcall	.+1490   	; 0x6f6 <__eewr_byte_tn2313>
	if(adress==176){
 124:	10 3b       	cpi	r17, 0xB0	; 176
 126:	51 f4       	brne	.+20     	; 0x13c <__stack+0x5d>
		if(data&0x01) PORTD|=0x10; 
 128:	00 fd       	sbrc	r16, 0
 12a:	94 9a       	sbi	0x12, 4	; 18
		if(data&0x02) PORTD&=~(0x10);
 12c:	01 fd       	sbrc	r16, 1
 12e:	94 98       	cbi	0x12, 4	; 18
		if(data&0x04) PORTD|=0x20;
 130:	02 fd       	sbrc	r16, 2
 132:	95 9a       	sbi	0x12, 5	; 18
		if(data&0x08) PORTD&=~(0x20);
 134:	03 ff       	sbrs	r16, 3
 136:	11 c0       	rjmp	.+34     	; 0x15a <__stack+0x7b>
 138:	95 98       	cbi	0x12, 5	; 18
 13a:	0f c0       	rjmp	.+30     	; 0x15a <__stack+0x7b>
		}
	if(adress==177)
 13c:	11 3b       	cpi	r17, 0xB1	; 177
 13e:	19 f4       	brne	.+6      	; 0x146 <__stack+0x67>
		USART_Init(data);
 140:	80 2f       	mov	r24, r16
 142:	bb df       	rcall	.-138    	; 0xba <USART_Init>
 144:	08 c0       	rjmp	.+16     	; 0x156 <__stack+0x77>
	if(adress==178){
 146:	12 3b       	cpi	r17, 0xB2	; 178
 148:	41 f4       	brne	.+16     	; 0x15a <__stack+0x7b>
		eeprom_write_byte(1,data);
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	60 2f       	mov	r22, r16
 150:	d2 d2       	rcall	.+1444   	; 0x6f6 <__eewr_byte_tn2313>
		number=data;
 152:	00 93 79 00 	sts	0x0079, r16
		}		
	if(adress>178)
		return 0;
	else
		return 1;
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	04 c0       	rjmp	.+8      	; 0x162 <__stack+0x83>
	if((address>=48)&&(address<176))
		return eeprom_read_byte(address-48);
	if(address==176)
		return ((PORTD&0x20)>>1)|((PORTD&0x10)>>4);
}
unsigned char write_registr_param(unsigned char adress, unsigned char data)
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	13 3b       	cpi	r17, 0xB3	; 179
 15e:	08 f0       	brcs	.+2      	; 0x162 <__stack+0x83>
 160:	80 e0       	ldi	r24, 0x00	; 0
		}		
	if(adress>178)
		return 0;
	else
		return 1;
}
 162:	1f 91       	pop	r17
 164:	0f 91       	pop	r16
 166:	08 95       	ret

00000168 <USART_Transmit>:
	UCSRB = (1<<RXEN)|(1<<TXEN)|(1<<RXCIE); //Разрешение на прием и н апередачу через USART
	UCSRC = (0<<USBS)|(1<<UCSZ0)|(1<<UCSZ1);
} 
void USART_Transmit( unsigned char data ) //Функция отправки данных
{
	while ( !(UCSRA & (1<<UDRE)) ); //Ожидание опустошения буфера приема
 168:	5d 9b       	sbis	0x0b, 5	; 11
 16a:	fe cf       	rjmp	.-4      	; 0x168 <USART_Transmit>
	UDR = data; //Начало передачи данных			        
 16c:	8c b9       	out	0x0c, r24	; 12
}
 16e:	08 95       	ret

00000170 <__vector_4>:
ISR(TIMER1_COMPA_vect)
{
 170:	1f 92       	push	r1
 172:	0f 92       	push	r0
 174:	0f b6       	in	r0, 0x3f	; 63
 176:	0f 92       	push	r0
 178:	11 24       	eor	r1, r1
	PORTD&=~(0x40);
 17a:	96 98       	cbi	0x12, 6	; 18
	TCCR1B=0x00;
 17c:	1e bc       	out	0x2e, r1	; 46
}
 17e:	0f 90       	pop	r0
 180:	0f be       	out	0x3f, r0	; 63
 182:	0f 90       	pop	r0
 184:	1f 90       	pop	r1
 186:	18 95       	reti

00000188 <__vector_7>:
ISR(USART_RX_vect)
{
 188:	1f 92       	push	r1
 18a:	0f 92       	push	r0
 18c:	0f b6       	in	r0, 0x3f	; 63
 18e:	0f 92       	push	r0
 190:	11 24       	eor	r1, r1
 192:	2f 93       	push	r18
 194:	3f 93       	push	r19
 196:	4f 93       	push	r20
 198:	5f 93       	push	r21
 19a:	8f 93       	push	r24
 19c:	9f 93       	push	r25
 19e:	ef 93       	push	r30
 1a0:	ff 93       	push	r31
	if(status&0x80) return;
 1a2:	50 91 ce 00 	lds	r21, 0x00CE
 1a6:	57 fd       	sbrc	r21, 7
 1a8:	28 c0       	rjmp	.+80     	; 0x1fa <__vector_7+0x72>
	BUF[COUNT]=UDR;
 1aa:	40 91 60 00 	lds	r20, 0x0060
 1ae:	8c b1       	in	r24, 0x0c	; 12
 1b0:	e4 2f       	mov	r30, r20
 1b2:	f0 e0       	ldi	r31, 0x00	; 0
 1b4:	e4 55       	subi	r30, 0x54	; 84
 1b6:	ff 4f       	sbci	r31, 0xFF	; 255
 1b8:	80 83       	st	Z, r24
	if(UCSRA&0x1C|status&0x20)
 1ba:	2b b1       	in	r18, 0x0b	; 11
 1bc:	85 2f       	mov	r24, r21
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	80 72       	andi	r24, 0x20	; 32
 1c2:	90 70       	andi	r25, 0x00	; 0
 1c4:	30 e0       	ldi	r19, 0x00	; 0
 1c6:	2c 71       	andi	r18, 0x1C	; 28
 1c8:	30 70       	andi	r19, 0x00	; 0
 1ca:	82 2b       	or	r24, r18
 1cc:	93 2b       	or	r25, r19
 1ce:	00 97       	sbiw	r24, 0x00	; 0
 1d0:	19 f0       	breq	.+6      	; 0x1d8 <__vector_7+0x50>
		status|=0x10;
 1d2:	50 61       	ori	r21, 0x10	; 16
 1d4:	50 93 ce 00 	sts	0x00CE, r21
	if(COUNT>=MAX)
 1d8:	40 32       	cpi	r20, 0x20	; 32
 1da:	28 f0       	brcs	.+10     	; 0x1e6 <__vector_7+0x5e>
		status|=0x10;
 1dc:	80 91 ce 00 	lds	r24, 0x00CE
 1e0:	80 61       	ori	r24, 0x10	; 16
 1e2:	80 93 ce 00 	sts	0x00CE, r24
	if(!(status&0x10))
 1e6:	80 91 ce 00 	lds	r24, 0x00CE
 1ea:	84 fd       	sbrc	r24, 4
 1ec:	03 c0       	rjmp	.+6      	; 0x1f4 <__vector_7+0x6c>
		COUNT++;
 1ee:	4f 5f       	subi	r20, 0xFF	; 255
 1f0:	40 93 60 00 	sts	0x0060, r20
	TCNT0=0x00;
 1f4:	12 be       	out	0x32, r1	; 50
	TCCR0B=0x05;
 1f6:	85 e0       	ldi	r24, 0x05	; 5
 1f8:	83 bf       	out	0x33, r24	; 51
}
 1fa:	ff 91       	pop	r31
 1fc:	ef 91       	pop	r30
 1fe:	9f 91       	pop	r25
 200:	8f 91       	pop	r24
 202:	5f 91       	pop	r21
 204:	4f 91       	pop	r20
 206:	3f 91       	pop	r19
 208:	2f 91       	pop	r18
 20a:	0f 90       	pop	r0
 20c:	0f be       	out	0x3f, r0	; 63
 20e:	0f 90       	pop	r0
 210:	1f 90       	pop	r1
 212:	18 95       	reti

00000214 <__vector_13>:
ISR(TIMER0_COMPA_vect)
{
 214:	1f 92       	push	r1
 216:	0f 92       	push	r0
 218:	0f b6       	in	r0, 0x3f	; 63
 21a:	0f 92       	push	r0
 21c:	11 24       	eor	r1, r1
 21e:	8f 93       	push	r24
	if((status&0x10)==0)
 220:	80 91 ce 00 	lds	r24, 0x00CE
 224:	84 fd       	sbrc	r24, 4
 226:	04 c0       	rjmp	.+8      	; 0x230 <__vector_13+0x1c>
		status|=0x80;	
 228:	80 68       	ori	r24, 0x80	; 128
 22a:	80 93 ce 00 	sts	0x00CE, r24
 22e:	02 c0       	rjmp	.+4      	; 0x234 <__vector_13+0x20>
	else
		status=0x00;
 230:	10 92 ce 00 	sts	0x00CE, r1
	TCCR0B=0x00;
 234:	13 be       	out	0x33, r1	; 51
}	
 236:	8f 91       	pop	r24
 238:	0f 90       	pop	r0
 23a:	0f be       	out	0x3f, r0	; 63
 23c:	0f 90       	pop	r0
 23e:	1f 90       	pop	r1
 240:	18 95       	reti

00000242 <__vector_14>:
ISR(TIMER0_COMPB_vect)
{
 242:	1f 92       	push	r1
 244:	0f 92       	push	r0
 246:	0f b6       	in	r0, 0x3f	; 63
 248:	0f 92       	push	r0
 24a:	11 24       	eor	r1, r1
 24c:	8f 93       	push	r24
	status|=0x20;
 24e:	80 91 ce 00 	lds	r24, 0x00CE
 252:	80 62       	ori	r24, 0x20	; 32
 254:	80 93 ce 00 	sts	0x00CE, r24
}
 258:	8f 91       	pop	r24
 25a:	0f 90       	pop	r0
 25c:	0f be       	out	0x3f, r0	; 63
 25e:	0f 90       	pop	r0
 260:	1f 90       	pop	r1
 262:	18 95       	reti

00000264 <ModRTU_CRC>:
unsigned short ModRTU_CRC(void)
{
	unsigned short crc = 0xFFFF;
    unsigned char pos,i;
    for (pos = 0; pos < (COUNT-2); pos++) {
 264:	80 91 60 00 	lds	r24, 0x0060
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	02 97       	sbiw	r24, 0x02	; 2
 26c:	e0 e0       	ldi	r30, 0x00	; 0
{
	status|=0x20;
}
unsigned short ModRTU_CRC(void)
{
	unsigned short crc = 0xFFFF;
 26e:	2f ef       	ldi	r18, 0xFF	; 255
 270:	3f ef       	ldi	r19, 0xFF	; 255
    for (pos = 0; pos < (COUNT-2); pos++) {
		crc ^= (unsigned char)BUF[pos];
		for (i = 8; i != 0; i--) {
			if ((crc & 0x0001) != 0) {
				crc >>= 1;
				crc ^= 0xA001;
 272:	61 e0       	ldi	r22, 0x01	; 1
 274:	70 ea       	ldi	r23, 0xA0	; 160
}
unsigned short ModRTU_CRC(void)
{
	unsigned short crc = 0xFFFF;
    unsigned char pos,i;
    for (pos = 0; pos < (COUNT-2); pos++) {
 276:	15 c0       	rjmp	.+42     	; 0x2a2 <ModRTU_CRC+0x3e>
		crc ^= (unsigned char)BUF[pos];
 278:	44 55       	subi	r20, 0x54	; 84
 27a:	5f 4f       	sbci	r21, 0xFF	; 255
 27c:	da 01       	movw	r26, r20
 27e:	4c 91       	ld	r20, X
 280:	50 e0       	ldi	r21, 0x00	; 0
 282:	24 27       	eor	r18, r20
 284:	35 27       	eor	r19, r21
 286:	f8 e0       	ldi	r31, 0x08	; 8
 288:	a9 01       	movw	r20, r18
 28a:	56 95       	lsr	r21
 28c:	47 95       	ror	r20
		for (i = 8; i != 0; i--) {
			if ((crc & 0x0001) != 0) {
 28e:	20 ff       	sbrs	r18, 0
 290:	04 c0       	rjmp	.+8      	; 0x29a <ModRTU_CRC+0x36>
				crc >>= 1;
				crc ^= 0xA001;
 292:	9a 01       	movw	r18, r20
 294:	26 27       	eor	r18, r22
 296:	37 27       	eor	r19, r23
 298:	01 c0       	rjmp	.+2      	; 0x29c <ModRTU_CRC+0x38>
			}
		else
			crc >>= 1;
 29a:	9a 01       	movw	r18, r20
 29c:	f1 50       	subi	r31, 0x01	; 1
{
	unsigned short crc = 0xFFFF;
    unsigned char pos,i;
    for (pos = 0; pos < (COUNT-2); pos++) {
		crc ^= (unsigned char)BUF[pos];
		for (i = 8; i != 0; i--) {
 29e:	a1 f7       	brne	.-24     	; 0x288 <ModRTU_CRC+0x24>
}
unsigned short ModRTU_CRC(void)
{
	unsigned short crc = 0xFFFF;
    unsigned char pos,i;
    for (pos = 0; pos < (COUNT-2); pos++) {
 2a0:	ef 5f       	subi	r30, 0xFF	; 255
 2a2:	4e 2f       	mov	r20, r30
 2a4:	50 e0       	ldi	r21, 0x00	; 0
 2a6:	48 17       	cp	r20, r24
 2a8:	59 07       	cpc	r21, r25
 2aa:	34 f3       	brlt	.-52     	; 0x278 <ModRTU_CRC+0x14>
		else
			crc >>= 1;
		}
    }
	return crc;
}
 2ac:	c9 01       	movw	r24, r18
 2ae:	08 95       	ret

000002b0 <send_message>:
	BUF[2]=j-3;
	COUNT=j+2;
	send_message();
}
void send_message(void)
{
 2b0:	1f 93       	push	r17
	if(BUF[0]!=number) return;
 2b2:	10 91 ac 00 	lds	r17, 0x00AC
 2b6:	80 91 79 00 	lds	r24, 0x0079
 2ba:	18 17       	cp	r17, r24
 2bc:	21 f5       	brne	.+72     	; 0x306 <send_message+0x56>
	
	unsigned short CRC;
	unsigned char i;
	CRC=ModRTU_CRC();
 2be:	d2 df       	rcall	.-92     	; 0x264 <ModRTU_CRC>
	BUF[COUNT-2]=(unsigned char)(CRC>>8);
 2c0:	20 91 60 00 	lds	r18, 0x0060
 2c4:	30 e0       	ldi	r19, 0x00	; 0
 2c6:	24 55       	subi	r18, 0x54	; 84
 2c8:	3f 4f       	sbci	r19, 0xFF	; 255
 2ca:	f9 01       	movw	r30, r18
 2cc:	32 97       	sbiw	r30, 0x02	; 2
 2ce:	90 83       	st	Z, r25
	BUF[COUNT-1]=(unsigned char)CRC;
 2d0:	21 50       	subi	r18, 0x01	; 1
 2d2:	30 40       	sbci	r19, 0x00	; 0
 2d4:	f9 01       	movw	r30, r18
 2d6:	80 83       	st	Z, r24
	PORTD|=0x04;
 2d8:	92 9a       	sbi	0x12, 2	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2da:	89 ef       	ldi	r24, 0xF9	; 249
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	01 97       	sbiw	r24, 0x01	; 1
 2e0:	f1 f7       	brne	.-4      	; 0x2de <send_message+0x2e>
 2e2:	00 c0       	rjmp	.+0      	; 0x2e4 <send_message+0x34>
 2e4:	00 00       	nop
	_delay_ms(1);
	USART_Transmit(number);
 2e6:	81 2f       	mov	r24, r17
 2e8:	3f df       	rcall	.-386    	; 0x168 <USART_Transmit>
	for(i=1;i<COUNT;i++)
 2ea:	11 e0       	ldi	r17, 0x01	; 1
 2ec:	07 c0       	rjmp	.+14     	; 0x2fc <send_message+0x4c>
		USART_Transmit(BUF[i]);
 2ee:	e1 2f       	mov	r30, r17
 2f0:	f0 e0       	ldi	r31, 0x00	; 0
 2f2:	e4 55       	subi	r30, 0x54	; 84
 2f4:	ff 4f       	sbci	r31, 0xFF	; 255
 2f6:	80 81       	ld	r24, Z
 2f8:	37 df       	rcall	.-402    	; 0x168 <USART_Transmit>
	BUF[COUNT-2]=(unsigned char)(CRC>>8);
	BUF[COUNT-1]=(unsigned char)CRC;
	PORTD|=0x04;
	_delay_ms(1);
	USART_Transmit(number);
	for(i=1;i<COUNT;i++)
 2fa:	1f 5f       	subi	r17, 0xFF	; 255
 2fc:	80 91 60 00 	lds	r24, 0x0060
 300:	18 17       	cp	r17, r24
 302:	a8 f3       	brcs	.-22     	; 0x2ee <send_message+0x3e>
		USART_Transmit(BUF[i]);
	PORTD&=~(0x04);
 304:	92 98       	cbi	0x12, 2	; 18
}
 306:	1f 91       	pop	r17
 308:	08 95       	ret

0000030a <read_bit_output>:
		j+=2;
	}		
	COUNT=5;send_message();
}
void read_bit_output(void)
{
 30a:	af 92       	push	r10
 30c:	bf 92       	push	r11
 30e:	cf 92       	push	r12
 310:	df 92       	push	r13
 312:	ef 92       	push	r14
 314:	ff 92       	push	r15
 316:	0f 93       	push	r16
 318:	1f 93       	push	r17
 31a:	df 93       	push	r29
 31c:	cf 93       	push	r28
 31e:	0f 92       	push	r0
 320:	cd b7       	in	r28, 0x3d	; 61
 322:	de b7       	in	r29, 0x3e	; 62
	unsigned short i,j,begin,end;
	unsigned char RS,k;
	begin=(BUF[2]<<8)|BUF[3];
 324:	90 91 ae 00 	lds	r25, 0x00AE
 328:	80 e0       	ldi	r24, 0x00	; 0
 32a:	00 91 af 00 	lds	r16, 0x00AF
 32e:	10 e0       	ldi	r17, 0x00	; 0
 330:	08 2b       	or	r16, r24
 332:	19 2b       	or	r17, r25
	end=begin+(BUF[4]<<8)|BUF[5];
 334:	90 91 b0 00 	lds	r25, 0x00B0
 338:	80 e0       	ldi	r24, 0x00	; 0
 33a:	78 01       	movw	r14, r16
 33c:	e8 0e       	add	r14, r24
 33e:	f9 1e       	adc	r15, r25
 340:	80 91 b1 00 	lds	r24, 0x00B1
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	e8 2a       	or	r14, r24
 348:	f9 2a       	or	r15, r25
 34a:	ee ea       	ldi	r30, 0xAE	; 174
 34c:	f0 e0       	ldi	r31, 0x00	; 0
	for(i=2;i<MAX;i++) BUF[i]=0;
 34e:	11 92       	st	Z+, r1
 350:	20 e0       	ldi	r18, 0x00	; 0
 352:	ec 3c       	cpi	r30, 0xCC	; 204
 354:	f2 07       	cpc	r31, r18
 356:	d9 f7       	brne	.-10     	; 0x34e <read_bit_output+0x44>
 358:	40 e0       	ldi	r20, 0x00	; 0
 35a:	93 e0       	ldi	r25, 0x03	; 3
 35c:	a9 2e       	mov	r10, r25
 35e:	b1 2c       	mov	r11, r1
	j=3;k=0;
	for(i=begin;i<end;i++)
	{
		RS=read_registr_param(i>>3)&(1<<(i&0x07));
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	c8 2e       	mov	r12, r24
 364:	d1 2c       	mov	r13, r1
 366:	38 c0       	rjmp	.+112    	; 0x3d8 <read_bit_output+0xce>
 368:	c8 01       	movw	r24, r16
 36a:	b3 e0       	ldi	r27, 0x03	; 3
 36c:	96 95       	lsr	r25
 36e:	87 95       	ror	r24
 370:	ba 95       	dec	r27
 372:	e1 f7       	brne	.-8      	; 0x36c <read_bit_output+0x62>
 374:	49 83       	std	Y+1, r20	; 0x01
 376:	66 de       	rcall	.-820    	; 0x44 <read_registr_param>
		BUF[j]|=RS<<(1<<k);
 378:	f5 01       	movw	r30, r10
 37a:	e4 55       	subi	r30, 0x54	; 84
 37c:	ff 4f       	sbci	r31, 0xFF	; 255
	end=begin+(BUF[4]<<8)|BUF[5];
	for(i=2;i<MAX;i++) BUF[i]=0;
	j=3;k=0;
	for(i=begin;i<end;i++)
	{
		RS=read_registr_param(i>>3)&(1<<(i&0x07));
 37e:	98 01       	movw	r18, r16
 380:	27 70       	andi	r18, 0x07	; 7
 382:	30 70       	andi	r19, 0x00	; 0
 384:	b6 01       	movw	r22, r12
 386:	02 c0       	rjmp	.+4      	; 0x38c <read_bit_output+0x82>
 388:	66 0f       	add	r22, r22
 38a:	77 1f       	adc	r23, r23
 38c:	2a 95       	dec	r18
 38e:	e2 f7       	brpl	.-8      	; 0x388 <read_bit_output+0x7e>
 390:	9b 01       	movw	r18, r22
 392:	28 23       	and	r18, r24
		BUF[j]|=RS<<(1<<k);
 394:	30 e0       	ldi	r19, 0x00	; 0
 396:	49 81       	ldd	r20, Y+1	; 0x01
 398:	c6 01       	movw	r24, r12
 39a:	04 2e       	mov	r0, r20
 39c:	02 c0       	rjmp	.+4      	; 0x3a2 <read_bit_output+0x98>
 39e:	88 0f       	add	r24, r24
 3a0:	99 1f       	adc	r25, r25
 3a2:	0a 94       	dec	r0
 3a4:	e2 f7       	brpl	.-8      	; 0x39e <read_bit_output+0x94>
 3a6:	02 c0       	rjmp	.+4      	; 0x3ac <read_bit_output+0xa2>
 3a8:	22 0f       	add	r18, r18
 3aa:	33 1f       	adc	r19, r19
 3ac:	8a 95       	dec	r24
 3ae:	e2 f7       	brpl	.-8      	; 0x3a8 <read_bit_output+0x9e>
 3b0:	80 81       	ld	r24, Z
 3b2:	82 2b       	or	r24, r18
 3b4:	80 83       	st	Z, r24
		k++;
 3b6:	4f 5f       	subi	r20, 0xFF	; 255
		if(k>7){k=0;j++;}
 3b8:	48 30       	cpi	r20, 0x08	; 8
 3ba:	20 f0       	brcs	.+8      	; 0x3c4 <read_bit_output+0xba>
 3bc:	08 94       	sec
 3be:	a1 1c       	adc	r10, r1
 3c0:	b1 1c       	adc	r11, r1
 3c2:	40 e0       	ldi	r20, 0x00	; 0
		if(j>(MAX-5)) {j--;break;}
 3c4:	7c e1       	ldi	r23, 0x1C	; 28
 3c6:	a7 16       	cp	r10, r23
 3c8:	b1 04       	cpc	r11, r1
 3ca:	20 f0       	brcs	.+8      	; 0x3d4 <read_bit_output+0xca>
 3cc:	08 94       	sec
 3ce:	a1 08       	sbc	r10, r1
 3d0:	b1 08       	sbc	r11, r1
 3d2:	05 c0       	rjmp	.+10     	; 0x3de <read_bit_output+0xd4>
	unsigned char RS,k;
	begin=(BUF[2]<<8)|BUF[3];
	end=begin+(BUF[4]<<8)|BUF[5];
	for(i=2;i<MAX;i++) BUF[i]=0;
	j=3;k=0;
	for(i=begin;i<end;i++)
 3d4:	0f 5f       	subi	r16, 0xFF	; 255
 3d6:	1f 4f       	sbci	r17, 0xFF	; 255
 3d8:	0e 15       	cp	r16, r14
 3da:	1f 05       	cpc	r17, r15
 3dc:	28 f2       	brcs	.-118    	; 0x368 <read_bit_output+0x5e>
		BUF[j]|=RS<<(1<<k);
		k++;
		if(k>7){k=0;j++;}
		if(j>(MAX-5)) {j--;break;}
	}
	BUF[2]=j-3;
 3de:	8a 2d       	mov	r24, r10
 3e0:	9a 2d       	mov	r25, r10
 3e2:	93 50       	subi	r25, 0x03	; 3
 3e4:	90 93 ae 00 	sts	0x00AE, r25
	COUNT=j+2;
 3e8:	8e 5f       	subi	r24, 0xFE	; 254
 3ea:	80 93 60 00 	sts	0x0060, r24
	send_message();
 3ee:	60 df       	rcall	.-320    	; 0x2b0 <send_message>
}
 3f0:	0f 90       	pop	r0
 3f2:	cf 91       	pop	r28
 3f4:	df 91       	pop	r29
 3f6:	1f 91       	pop	r17
 3f8:	0f 91       	pop	r16
 3fa:	ff 90       	pop	r15
 3fc:	ef 90       	pop	r14
 3fe:	df 90       	pop	r13
 400:	cf 90       	pop	r12
 402:	bf 90       	pop	r11
 404:	af 90       	pop	r10
 406:	08 95       	ret

00000408 <write_registrs_param>:
		return 0;
	else
		return 1;
}
void write_registrs_param(void)
{
 408:	ff 92       	push	r15
 40a:	0f 93       	push	r16
 40c:	1f 93       	push	r17
	unsigned char j,i,k;
	if(BUF[6]!=(COUNT-9)){
 40e:	20 91 b2 00 	lds	r18, 0x00B2
 412:	30 e0       	ldi	r19, 0x00	; 0
 414:	80 91 60 00 	lds	r24, 0x0060
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	09 97       	sbiw	r24, 0x09	; 9
 41c:	28 17       	cp	r18, r24
 41e:	39 07       	cpc	r19, r25
 420:	49 f0       	breq	.+18     	; 0x434 <write_registrs_param+0x2c>
		BUF[1]|=0x80;
 422:	80 91 ad 00 	lds	r24, 0x00AD
 426:	80 68       	ori	r24, 0x80	; 128
 428:	80 93 ad 00 	sts	0x00AD, r24
		BUF[2]=0x01;
 42c:	81 e0       	ldi	r24, 0x01	; 1
 42e:	80 93 ae 00 	sts	0x00AE, r24
 432:	20 c0       	rjmp	.+64     	; 0x474 <write_registrs_param+0x6c>
		COUNT=5;
		send_message();
		return;
	}
	j=8;BUF[2]=0;
 434:	10 92 ae 00 	sts	0x00AE, r1
	for(i=BUF[3];i<(BUF[3]+BUF[5]);i++){
 438:	10 91 af 00 	lds	r17, 0x00AF
		BUF[2]=0x01;
		COUNT=5;
		send_message();
		return;
	}
	j=8;BUF[2]=0;
 43c:	08 e0       	ldi	r16, 0x08	; 8
	for(i=BUF[3];i<(BUF[3]+BUF[5]);i++){
 43e:	0e c0       	rjmp	.+28     	; 0x45c <write_registrs_param+0x54>
		BUF[2]+=write_registr_param(i,BUF[j]);
 440:	f0 90 ae 00 	lds	r15, 0x00AE
 444:	e0 2f       	mov	r30, r16
 446:	f0 e0       	ldi	r31, 0x00	; 0
 448:	e4 55       	subi	r30, 0x54	; 84
 44a:	ff 4f       	sbci	r31, 0xFF	; 255
 44c:	81 2f       	mov	r24, r17
 44e:	60 81       	ld	r22, Z
 450:	42 de       	rcall	.-892    	; 0xd6 <write_registr_param>
 452:	8f 0d       	add	r24, r15
 454:	80 93 ae 00 	sts	0x00AE, r24
		j+=2;
 458:	0e 5f       	subi	r16, 0xFE	; 254
		COUNT=5;
		send_message();
		return;
	}
	j=8;BUF[2]=0;
	for(i=BUF[3];i<(BUF[3]+BUF[5]);i++){
 45a:	1f 5f       	subi	r17, 0xFF	; 255
 45c:	41 2f       	mov	r20, r17
 45e:	50 e0       	ldi	r21, 0x00	; 0
 460:	80 91 b1 00 	lds	r24, 0x00B1
 464:	20 91 af 00 	lds	r18, 0x00AF
 468:	30 e0       	ldi	r19, 0x00	; 0
 46a:	28 0f       	add	r18, r24
 46c:	31 1d       	adc	r19, r1
 46e:	42 17       	cp	r20, r18
 470:	53 07       	cpc	r21, r19
 472:	34 f3       	brlt	.-52     	; 0x440 <write_registrs_param+0x38>
		BUF[2]+=write_registr_param(i,BUF[j]);
		j+=2;
	}		
	COUNT=5;send_message();
 474:	85 e0       	ldi	r24, 0x05	; 5
 476:	80 93 60 00 	sts	0x0060, r24
 47a:	1a df       	rcall	.-460    	; 0x2b0 <send_message>
}
 47c:	1f 91       	pop	r17
 47e:	0f 91       	pop	r16
 480:	ff 90       	pop	r15
 482:	08 95       	ret

00000484 <read_registr_data>:
	BUF[3]=(unsigned char)COUNT_COMAND;
	COUNT=6;
	send_message();
}
void read_registr_data()
{
 484:	ff 92       	push	r15
 486:	0f 93       	push	r16
 488:	1f 93       	push	r17
 48a:	cf 93       	push	r28
 48c:	df 93       	push	r29
	unsigned char i,j,begin,count;
	unsigned short RS;
	begin=BUF[3];
 48e:	00 91 af 00 	lds	r16, 0x00AF
	count=BUF[5];
 492:	80 91 b1 00 	lds	r24, 0x00B1
 496:	8c 31       	cpi	r24, 0x1C	; 28
 498:	08 f0       	brcs	.+2      	; 0x49c <read_registr_data+0x18>
 49a:	8b e1       	ldi	r24, 0x1B	; 27
	if(count>(MAX-5)) count=(MAX-5);
	j=3;
 49c:	13 e0       	ldi	r17, 0x03	; 3
	for(i=begin;i<(begin+count);i++)
 49e:	c0 2f       	mov	r28, r16
 4a0:	d0 e0       	ldi	r29, 0x00	; 0
 4a2:	c8 0f       	add	r28, r24
 4a4:	d1 1d       	adc	r29, r1
 4a6:	0f c0       	rjmp	.+30     	; 0x4c6 <read_registr_data+0x42>
	{
		RS=read_registr_param(i);
 4a8:	80 2f       	mov	r24, r16
 4aa:	cc dd       	rcall	.-1128   	; 0x44 <read_registr_param>
		BUF[j++]=(unsigned char)(RS>>8);
 4ac:	a1 2f       	mov	r26, r17
 4ae:	b0 e0       	ldi	r27, 0x00	; 0
 4b0:	a4 55       	subi	r26, 0x54	; 84
 4b2:	bf 4f       	sbci	r27, 0xFF	; 255
 4b4:	9c 93       	st	X, r25
		BUF[j++]=(unsigned char)RS;
 4b6:	1f 5f       	subi	r17, 0xFF	; 255
 4b8:	e1 2f       	mov	r30, r17
 4ba:	f0 e0       	ldi	r31, 0x00	; 0
 4bc:	e4 55       	subi	r30, 0x54	; 84
 4be:	ff 4f       	sbci	r31, 0xFF	; 255
 4c0:	80 83       	st	Z, r24
 4c2:	1f 2d       	mov	r17, r15
	unsigned short RS;
	begin=BUF[3];
	count=BUF[5];
	if(count>(MAX-5)) count=(MAX-5);
	j=3;
	for(i=begin;i<(begin+count);i++)
 4c4:	0f 5f       	subi	r16, 0xFF	; 255
 4c6:	20 2f       	mov	r18, r16
 4c8:	30 e0       	ldi	r19, 0x00	; 0
 4ca:	42 e0       	ldi	r20, 0x02	; 2
 4cc:	f4 2e       	mov	r15, r20
 4ce:	f1 0e       	add	r15, r17
 4d0:	2c 17       	cp	r18, r28
 4d2:	3d 07       	cpc	r19, r29
 4d4:	4c f3       	brlt	.-46     	; 0x4a8 <read_registr_data+0x24>
	{
		RS=read_registr_param(i);
		BUF[j++]=(unsigned char)(RS>>8);
		BUF[j++]=(unsigned char)RS;
	}
	BUF[2]=j-3;
 4d6:	13 50       	subi	r17, 0x03	; 3
 4d8:	10 93 ae 00 	sts	0x00AE, r17
	COUNT=j+2;
 4dc:	f0 92 60 00 	sts	0x0060, r15
	send_message();
 4e0:	e7 de       	rcall	.-562    	; 0x2b0 <send_message>
}
 4e2:	df 91       	pop	r29
 4e4:	cf 91       	pop	r28
 4e6:	1f 91       	pop	r17
 4e8:	0f 91       	pop	r16
 4ea:	ff 90       	pop	r15
 4ec:	08 95       	ret

000004ee <get_com_event_counter>:
	COUNT=16;
	send_message();
}
void get_com_event_counter()
{
	BUF[2]=(unsigned char)(COUNT_COMAND>>8);
 4ee:	80 91 7a 00 	lds	r24, 0x007A
 4f2:	90 91 7b 00 	lds	r25, 0x007B
 4f6:	90 93 ae 00 	sts	0x00AE, r25
	BUF[3]=(unsigned char)COUNT_COMAND;
 4fa:	80 93 af 00 	sts	0x00AF, r24
	COUNT=6;
 4fe:	86 e0       	ldi	r24, 0x06	; 6
 500:	80 93 60 00 	sts	0x0060, r24
	send_message();
 504:	d5 de       	rcall	.-598    	; 0x2b0 <send_message>
}
 506:	08 95       	ret

00000508 <report_slave_id>:
	_delay_ms(100);
	}
}
void report_slave_id()
{
	BUF[2]=12;
 508:	8c e0       	ldi	r24, 0x0C	; 12
 50a:	80 93 ae 00 	sts	0x00AE, r24
	BUF[3]='2';
 50e:	82 e3       	ldi	r24, 0x32	; 50
 510:	80 93 af 00 	sts	0x00AF, r24
	BUF[4]='3';
 514:	83 e3       	ldi	r24, 0x33	; 51
 516:	80 93 b0 00 	sts	0x00B0, r24
	BUF[5]=0xFF;
 51a:	8f ef       	ldi	r24, 0xFF	; 255
 51c:	80 93 b1 00 	sts	0x00B1, r24
	BUF[6]='R';
 520:	82 e5       	ldi	r24, 0x52	; 82
 522:	80 93 b2 00 	sts	0x00B2, r24
	BUF[7]='e';
 526:	85 e6       	ldi	r24, 0x65	; 101
 528:	80 93 b3 00 	sts	0x00B3, r24
	BUF[8]='l';
 52c:	9c e6       	ldi	r25, 0x6C	; 108
 52e:	90 93 b4 00 	sts	0x00B4, r25
	BUF[9]='e';
 532:	80 93 b5 00 	sts	0x00B5, r24
	BUF[10]='y';
 536:	89 e7       	ldi	r24, 0x79	; 121
 538:	80 93 b6 00 	sts	0x00B6, r24
	BUF[11]=' ';
 53c:	80 e2       	ldi	r24, 0x20	; 32
 53e:	80 93 b7 00 	sts	0x00B7, r24
	BUF[12]='1';
 542:	81 e3       	ldi	r24, 0x31	; 49
 544:	80 93 b8 00 	sts	0x00B8, r24
	BUF[13]='.';
 548:	8e e2       	ldi	r24, 0x2E	; 46
 54a:	80 93 b9 00 	sts	0x00B9, r24
	BUF[14]='0';
 54e:	80 e3       	ldi	r24, 0x30	; 48
 550:	80 93 ba 00 	sts	0x00BA, r24
	COUNT=16;
 554:	80 e1       	ldi	r24, 0x10	; 16
 556:	80 93 60 00 	sts	0x0060, r24
	send_message();
 55a:	aa de       	rcall	.-684    	; 0x2b0 <send_message>
}
 55c:	08 95       	ret

0000055e <check_CRC>:
}
unsigned char check_CRC()
{
	unsigned char i,j;
	unsigned short CRC;
	CRC=ModRTU_CRC();
 55e:	82 de       	rcall	.-764    	; 0x264 <ModRTU_CRC>
	j=(unsigned char)(CRC>>8);
	i=(unsigned char)CRC;
	return (BUF[COUNT-2]==j)&(BUF[COUNT-1]==i);
 560:	20 91 60 00 	lds	r18, 0x0060
 564:	30 e0       	ldi	r19, 0x00	; 0
 566:	f9 01       	movw	r30, r18
 568:	e6 55       	subi	r30, 0x56	; 86
 56a:	ff 4f       	sbci	r31, 0xFF	; 255
 56c:	41 e0       	ldi	r20, 0x01	; 1
 56e:	50 81       	ld	r21, Z
 570:	59 13       	cpse	r21, r25
 572:	40 e0       	ldi	r20, 0x00	; 0
 574:	25 55       	subi	r18, 0x55	; 85
 576:	3f 4f       	sbci	r19, 0xFF	; 255
 578:	91 e0       	ldi	r25, 0x01	; 1
 57a:	f9 01       	movw	r30, r18
 57c:	20 81       	ld	r18, Z
 57e:	28 13       	cpse	r18, r24
 580:	90 e0       	ldi	r25, 0x00	; 0
 582:	84 2f       	mov	r24, r20
 584:	89 23       	and	r24, r25
 586:	08 95       	ret

00000588 <main>:
unsigned char PLAN[24];
unsigned char BLOCK[24];
unsigned char status,COUNT,number,DEV1,DEV2;
unsigned short COUNT_COMAND;
int main(void)
{
 588:	cf 92       	push	r12
 58a:	df 92       	push	r13
 58c:	ef 92       	push	r14
 58e:	ff 92       	push	r15
 590:	0f 93       	push	r16
 592:	1f 93       	push	r17
 594:	cf 93       	push	r28
 596:	df 93       	push	r29
	USART_Init(eeprom_read_byte(0));
 598:	80 e0       	ldi	r24, 0x00	; 0
 59a:	90 e0       	ldi	r25, 0x00	; 0
 59c:	a4 d0       	rcall	.+328    	; 0x6e6 <__eerd_byte_tn2313>
 59e:	8d dd       	rcall	.-1254   	; 0xba <USART_Init>
	number=eeprom_read_byte(1);
 5a0:	81 e0       	ldi	r24, 0x01	; 1
 5a2:	90 e0       	ldi	r25, 0x00	; 0
 5a4:	a0 d0       	rcall	.+320    	; 0x6e6 <__eerd_byte_tn2313>
 5a6:	80 93 79 00 	sts	0x0079, r24
	DEV1=eeprom_read_byte(2);
 5aa:	82 e0       	ldi	r24, 0x02	; 2
 5ac:	90 e0       	ldi	r25, 0x00	; 0
 5ae:	9b d0       	rcall	.+310    	; 0x6e6 <__eerd_byte_tn2313>
 5b0:	80 93 cd 00 	sts	0x00CD, r24
	DEV2=eeprom_read_byte(3);
 5b4:	83 e0       	ldi	r24, 0x03	; 3
 5b6:	90 e0       	ldi	r25, 0x00	; 0
 5b8:	96 d0       	rcall	.+300    	; 0x6e6 <__eerd_byte_tn2313>
 5ba:	80 93 cc 00 	sts	0x00CC, r24
	DDRD= 0x74;
 5be:	84 e7       	ldi	r24, 0x74	; 116
 5c0:	81 bb       	out	0x11, r24	; 17
	PORTD=eeprom_read_byte(4)&0x30;
 5c2:	84 e0       	ldi	r24, 0x04	; 4
 5c4:	90 e0       	ldi	r25, 0x00	; 0
 5c6:	8f d0       	rcall	.+286    	; 0x6e6 <__eerd_byte_tn2313>
 5c8:	80 73       	andi	r24, 0x30	; 48
 5ca:	82 bb       	out	0x12, r24	; 18
 5cc:	ec e7       	ldi	r30, 0x7C	; 124
 5ce:	ee 2e       	mov	r14, r30
 5d0:	e0 e0       	ldi	r30, 0x00	; 0
 5d2:	fe 2e       	mov	r15, r30
 5d4:	01 e6       	ldi	r16, 0x61	; 97
 5d6:	10 e0       	ldi	r17, 0x00	; 0
 5d8:	74 e9       	ldi	r23, 0x94	; 148
 5da:	c7 2e       	mov	r12, r23
 5dc:	70 e0       	ldi	r23, 0x00	; 0
 5de:	d7 2e       	mov	r13, r23
 5e0:	c8 e0       	ldi	r28, 0x08	; 8
 5e2:	d0 e0       	ldi	r29, 0x00	; 0
	unsigned char i;
	for(i=0;i<24;i++){
		FACT[i]=0;
 5e4:	f7 01       	movw	r30, r14
 5e6:	11 92       	st	Z+, r1
 5e8:	7f 01       	movw	r14, r30
		PLAN[i]=eeprom_read_byte(8+i);
 5ea:	ce 01       	movw	r24, r28
 5ec:	7c d0       	rcall	.+248    	; 0x6e6 <__eerd_byte_tn2313>
 5ee:	f8 01       	movw	r30, r16
 5f0:	81 93       	st	Z+, r24
 5f2:	8f 01       	movw	r16, r30
		BLOCK[i]=eeprom_read_byte(32+i);
 5f4:	ce 01       	movw	r24, r28
 5f6:	48 96       	adiw	r24, 0x18	; 24
 5f8:	76 d0       	rcall	.+236    	; 0x6e6 <__eerd_byte_tn2313>
 5fa:	f6 01       	movw	r30, r12
 5fc:	81 93       	st	Z+, r24
 5fe:	6f 01       	movw	r12, r30
 600:	21 96       	adiw	r28, 0x01	; 1
	DEV1=eeprom_read_byte(2);
	DEV2=eeprom_read_byte(3);
	DDRD= 0x74;
	PORTD=eeprom_read_byte(4)&0x30;
	unsigned char i;
	for(i=0;i<24;i++){
 602:	c0 32       	cpi	r28, 0x20	; 32
 604:	d1 05       	cpc	r29, r1
 606:	71 f7       	brne	.-36     	; 0x5e4 <main+0x5c>
		FACT[i]=0;
		PLAN[i]=eeprom_read_byte(8+i);
		BLOCK[i]=eeprom_read_byte(32+i);
	}
	COUNT=0;
 608:	10 92 60 00 	sts	0x0060, r1
	status=0;
 60c:	10 92 ce 00 	sts	0x00CE, r1
	COUNT_COMAND=0;
 610:	10 92 7b 00 	sts	0x007B, r1
 614:	10 92 7a 00 	sts	0x007A, r1
	TCCR1A=0x00;
 618:	1f bc       	out	0x2f, r1	; 47
	OCR1AH=0x08;
 61a:	88 e0       	ldi	r24, 0x08	; 8
 61c:	8b bd       	out	0x2b, r24	; 43
	OCR1AL=0x00;
 61e:	1a bc       	out	0x2a, r1	; 42
	TCCR0A=0x02;
 620:	82 e0       	ldi	r24, 0x02	; 2
 622:	80 bf       	out	0x30, r24	; 48
	TCCR0B=0x00;
 624:	13 be       	out	0x33, r1	; 51
	TIMSK=(1<<OCIE0A)|(1<<OCIE0B)|(1<<OCIE1A);
 626:	85 e4       	ldi	r24, 0x45	; 69
 628:	89 bf       	out	0x39, r24	; 57
	DDRB=0xFF;
 62a:	8f ef       	ldi	r24, 0xFF	; 255
 62c:	87 bb       	out	0x17, r24	; 23
	sei();
 62e:	78 94       	sei
	{
	if(status&0x80)
		{
			if((number==BUF[0]|BUF[0]==0x00)&&(check_CRC())){
				PORTD|=0x40;
				TCCR1B=0x0D;
 630:	6d e0       	ldi	r22, 0x0D	; 13
 632:	c6 2e       	mov	r12, r22
//				case 0x01:read_bit_output();break;
//				case 0x02:read_bit_input();break;
				case 0x03:read_registr_data();break;
				case 0x04:read_registr_data();break;
//				case 0x05:write_bit_output();break;
				case 0x06:write_registr_param(BUF[3],BUF[5]);COUNT=8;send_message();break;
 634:	58 e0       	ldi	r21, 0x08	; 8
 636:	e5 2e       	mov	r14, r21
//				case 0x0F:write_bits_output();break;
				case 0x10:write_registrs_param();break;
				case 0x11:report_slave_id();break;
				default:
					BUF[1]|=0x80;
					BUF[2]=0x01;
 638:	11 e0       	ldi	r17, 0x01	; 1
					COUNT=5;
 63a:	05 e0       	ldi	r16, 0x05	; 5
	TIMSK=(1<<OCIE0A)|(1<<OCIE0B)|(1<<OCIE1A);
	DDRB=0xFF;
	sei();
	for(;;)
	{
	if(status&0x80)
 63c:	80 91 ce 00 	lds	r24, 0x00CE
 640:	87 ff       	sbrs	r24, 7
 642:	4a c0       	rjmp	.+148    	; 0x6d8 <main+0x150>
		{
			if((number==BUF[0]|BUF[0]==0x00)&&(check_CRC())){
 644:	80 91 ac 00 	lds	r24, 0x00AC
 648:	88 23       	and	r24, r24
 64a:	21 f0       	breq	.+8      	; 0x654 <main+0xcc>
 64c:	90 91 79 00 	lds	r25, 0x0079
 650:	98 17       	cp	r25, r24
 652:	f1 f5       	brne	.+124    	; 0x6d0 <main+0x148>
 654:	84 df       	rcall	.-248    	; 0x55e <check_CRC>
 656:	88 23       	and	r24, r24
 658:	d9 f1       	breq	.+118    	; 0x6d0 <main+0x148>
				PORTD|=0x40;
 65a:	96 9a       	sbi	0x12, 6	; 18
				TCCR1B=0x0D;
 65c:	ce bc       	out	0x2e, r12	; 46
				COUNT_COMAND++;
 65e:	80 91 7a 00 	lds	r24, 0x007A
 662:	90 91 7b 00 	lds	r25, 0x007B
 666:	9c 01       	movw	r18, r24
 668:	2f 5f       	subi	r18, 0xFF	; 255
 66a:	3f 4f       	sbci	r19, 0xFF	; 255
 66c:	30 93 7b 00 	sts	0x007B, r19
 670:	20 93 7a 00 	sts	0x007A, r18
			switch(BUF[1]){
 674:	20 91 ad 00 	lds	r18, 0x00AD
 678:	26 30       	cpi	r18, 0x06	; 6
 67a:	81 f0       	breq	.+32     	; 0x69c <main+0x114>
 67c:	27 30       	cpi	r18, 0x07	; 7
 67e:	28 f4       	brcc	.+10     	; 0x68a <main+0x102>
 680:	23 30       	cpi	r18, 0x03	; 3
 682:	51 f0       	breq	.+20     	; 0x698 <main+0x110>
 684:	24 30       	cpi	r18, 0x04	; 4
 686:	c1 f4       	brne	.+48     	; 0x6b8 <main+0x130>
 688:	07 c0       	rjmp	.+14     	; 0x698 <main+0x110>
 68a:	20 31       	cpi	r18, 0x10	; 16
 68c:	89 f0       	breq	.+34     	; 0x6b0 <main+0x128>
 68e:	21 31       	cpi	r18, 0x11	; 17
 690:	89 f0       	breq	.+34     	; 0x6b4 <main+0x12c>
 692:	2b 30       	cpi	r18, 0x0B	; 11
 694:	89 f4       	brne	.+34     	; 0x6b8 <main+0x130>
 696:	0a c0       	rjmp	.+20     	; 0x6ac <main+0x124>
//				case 0x01:read_bit_output();break;
//				case 0x02:read_bit_input();break;
				case 0x03:read_registr_data();break;
				case 0x04:read_registr_data();break;
 698:	f5 de       	rcall	.-534    	; 0x484 <read_registr_data>
 69a:	1a c0       	rjmp	.+52     	; 0x6d0 <main+0x148>
//				case 0x05:write_bit_output();break;
				case 0x06:write_registr_param(BUF[3],BUF[5]);COUNT=8;send_message();break;
 69c:	80 91 af 00 	lds	r24, 0x00AF
 6a0:	60 91 b1 00 	lds	r22, 0x00B1
 6a4:	18 dd       	rcall	.-1488   	; 0xd6 <write_registr_param>
 6a6:	e0 92 60 00 	sts	0x0060, r14
 6aa:	11 c0       	rjmp	.+34     	; 0x6ce <main+0x146>
				case 0x0B:get_com_event_counter();break;
 6ac:	20 df       	rcall	.-448    	; 0x4ee <get_com_event_counter>
 6ae:	10 c0       	rjmp	.+32     	; 0x6d0 <main+0x148>
//				case 0x0F:write_bits_output();break;
				case 0x10:write_registrs_param();break;
 6b0:	ab de       	rcall	.-682    	; 0x408 <write_registrs_param>
 6b2:	0e c0       	rjmp	.+28     	; 0x6d0 <main+0x148>
				case 0x11:report_slave_id();break;
 6b4:	29 df       	rcall	.-430    	; 0x508 <report_slave_id>
 6b6:	0c c0       	rjmp	.+24     	; 0x6d0 <main+0x148>
				default:
					BUF[1]|=0x80;
 6b8:	20 68       	ori	r18, 0x80	; 128
 6ba:	20 93 ad 00 	sts	0x00AD, r18
					BUF[2]=0x01;
 6be:	10 93 ae 00 	sts	0x00AE, r17
					COUNT=5;
 6c2:	00 93 60 00 	sts	0x0060, r16
					COUNT_COMAND--;
 6c6:	90 93 7b 00 	sts	0x007B, r25
 6ca:	80 93 7a 00 	sts	0x007A, r24
					send_message();					
 6ce:	f0 dd       	rcall	.-1056   	; 0x2b0 <send_message>
			}			
			}
		status=0;
 6d0:	10 92 ce 00 	sts	0x00CE, r1
		COUNT=0;
 6d4:	10 92 60 00 	sts	0x0060, r1
 6d8:	87 ea       	ldi	r24, 0xA7	; 167
 6da:	91 e6       	ldi	r25, 0x61	; 97
 6dc:	01 97       	sbiw	r24, 0x01	; 1
 6de:	f1 f7       	brne	.-4      	; 0x6dc <main+0x154>
 6e0:	00 c0       	rjmp	.+0      	; 0x6e2 <main+0x15a>
 6e2:	00 00       	nop
 6e4:	ab cf       	rjmp	.-170    	; 0x63c <main+0xb4>

000006e6 <__eerd_byte_tn2313>:
 6e6:	e1 99       	sbic	0x1c, 1	; 28
 6e8:	fe cf       	rjmp	.-4      	; 0x6e6 <__eerd_byte_tn2313>
 6ea:	1f ba       	out	0x1f, r1	; 31
 6ec:	8e bb       	out	0x1e, r24	; 30
 6ee:	e0 9a       	sbi	0x1c, 0	; 28
 6f0:	99 27       	eor	r25, r25
 6f2:	8d b3       	in	r24, 0x1d	; 29
 6f4:	08 95       	ret

000006f6 <__eewr_byte_tn2313>:
 6f6:	26 2f       	mov	r18, r22

000006f8 <__eewr_r18_tn2313>:
 6f8:	e1 99       	sbic	0x1c, 1	; 28
 6fa:	fe cf       	rjmp	.-4      	; 0x6f8 <__eewr_r18_tn2313>
 6fc:	1c ba       	out	0x1c, r1	; 28
 6fe:	1f ba       	out	0x1f, r1	; 31
 700:	8e bb       	out	0x1e, r24	; 30
 702:	2d bb       	out	0x1d, r18	; 29
 704:	0f b6       	in	r0, 0x3f	; 63
 706:	f8 94       	cli
 708:	e2 9a       	sbi	0x1c, 2	; 28
 70a:	e1 9a       	sbi	0x1c, 1	; 28
 70c:	0f be       	out	0x3f, r0	; 63
 70e:	01 96       	adiw	r24, 0x01	; 1
 710:	08 95       	ret

00000712 <_exit>:
 712:	f8 94       	cli

00000714 <__stop_program>:
 714:	ff cf       	rjmp	.-2      	; 0x714 <__stop_program>
